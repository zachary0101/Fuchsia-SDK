# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("build/config/config.gni")
import("build/config/fidl_library.gni")

# Templates for Fuchsia SDK packages.

# Defines a Fuchsia SDK FIDL library target.
#
# $namespace.$library_name must match the the library name specified in the FIDL
# files.
#
# Parameters
#
#   sources
#     Required: List of .fidl files.
#
#   library_name
#     Optional: Name of the library. target_name is used if name
#               is not specified explicitly.
#
#   namespace
#     Optional: Namespace for the library.
#
#   deps
#     Optional: List of other fidl_library() targets that this
#               FIDL library depends on.
#
template("fuchsia_sdk_fidl_pkg") {
  _package_name = target_name
  if (defined(invoker.package_name)) {
    _package_name = invoker.package_name
  }

  fidl_library(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])

    library_name = _package_name

    if (defined(invoker.namespace)) {
      namespace = invoker.namespace
    }

    sources = invoker.sources
  }
}

# Defines a Fuchsia SDK library target from source or prebuilt.
#
#
# Parameters
#
#   package_name
#     Optional: Name of the library. Default is target_name.
#   sources
#     Required: List of source files.
#
#   library_name
#     Optional: Name of the library. target_name is used if name
#               is not specified explicitly.
#
#   shared_libs
#     Optional: List of shared libraries for this target.
#
#   static_libs
#     Optional: List of static libraries for this target.
#
#   deps
#     Optional: List of other targets that this library depends on.
#
# Declares a package containing uncompiled code and/or precompiled libraries.
#
template("fuchsia_sdk_pkg") {
  config("${target_name}_config") {
    forward_variables_from(invoker, [ "include_dirs" ])
    visibility = [ ":${invoker.target_name}" ]
  }

  if (defined(invoker.shared_libs)) {
    if (defined(invoker.sdk_dist_dir)) {
      sdk_dist_dir = invoker.sdk_dist_dir
    } else {
      sdk_dist_dir = "${fuchsia_sdk}/arch/${target_cpu}/dist"
    }

    copy("${target_name}_dist_libs") {
      sources = []
      foreach(lib, invoker.shared_libs) {
        sources += [ "${sdk_dist_dir}/lib${lib}.so" ]
      }

      outputs = [
        "${root_out_dir}/lib/{{source_file_part}}",
      ]
    }
  }

  static_library(target_name) {
    forward_variables_from(invoker,
                           [
                             "data",
                             "deps",
                             "public_deps",
                             "sources",
                             "testonly",
                             "visibility",
                           ])

    public_configs = [ ":${invoker.target_name}_config" ]

    if (defined(invoker.shared_libs)) {
      configs += [ "${fuchsia_sdk_base}:sdk_lib_dirs_config" ]
      libs = invoker.shared_libs
      data_deps = [
        ":${target_name}_dist_libs",
      ]
    } else if (defined(invoker.static_libs)) {
      libs = invoker.static_libs
    }
  }
}
